#!/usr/bin/env node

import { google } from 'googleapis';
import * as fs from 'fs';
import * as path from 'path';
import * as https from 'https';
import { v4 as uuidv4 } from 'uuid';

import { configuration } from './configuration';
import { qdrant } from './qdrant';
import { VectorCacheManager } from './vector-cache';

type DriveDownloadResult = { fileName: string; content: string };
type ChunkData = { text: string; index: number };

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const MAX_FILE_SIZE_MB = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è 2GB —Å–µ—Ä–≤–µ—Ä–∞)
const BATCH_SIZE = 15; // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Qdrant (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è 2GB —Å–µ—Ä–≤–µ—Ä–∞)
const MAX_CONCURRENT_REQUESTS = 2; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è 2GB —Å–µ—Ä–≤–µ—Ä–∞)
const MEMORY_THRESHOLD_MB = 300; // –ü–æ—Ä–æ–≥ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è 2GB —Å–µ—Ä–≤–µ—Ä–∞)
const LOW_MEMORY_MODE = true; // –†–µ–∂–∏–º –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é

function parseArgs(argv: string[]) {
  const args: Record<string, string | number | boolean> = {};
  for (let i = 2; i < argv.length; i++) {
    const arg = argv[i];
    if (arg.startsWith('--')) {
      const key = arg.replace(/^--/, '');
      const next = argv[i + 1];
      if (!next || next.startsWith('--')) {
        args[key] = true;
      } else {
        args[key] = next;
        i++;
      }
    }
  }
  return args as {
    path?: string;
    drive?: string;
    chunkSize?: string | number;
    overlap?: string | number;
    batchSize?: string | number;
    maxConcurrent?: string | number;
  };
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
function getMemoryUsage(): { used: number; total: number; percentage: number } {
  const usage = process.memoryUsage();
  const used = Math.round(usage.heapUsed / 1024 / 1024);
  const total = Math.round(usage.heapTotal / 1024 / 1024);
  const percentage = Math.round((used / total) * 100);
  return { used, total, percentage };
}

function logMemoryUsage(context: string) {
  const { used, total, percentage } = getMemoryUsage();
  console.log(`üíæ –ü–∞–º—è—Ç—å [${context}]: ${used}MB/${total}MB (${percentage}%)`);

  if (used > MEMORY_THRESHOLD_MB) {
    console.warn(`‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${used}MB`);
    if (LOW_MEMORY_MODE) {
      console.warn(`   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–º–µ–Ω—å—à–∏—Ç–µ --batchSize –∏–ª–∏ --maxConcurrent`);
    }
  }

  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è 2GB —Å–µ—Ä–≤–µ—Ä–æ–≤
  if (used > 800) {
    console.error(`üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ ${used}MB –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫—Ä–∞—Ö—É!`);
    console.error(`   –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function checkFileSize(filePath: string): void {
  const stats = fs.statSync(filePath);
  const sizeMB = stats.size / 1024 / 1024;

  if (sizeMB > MAX_FILE_SIZE_MB) {
    console.warn(`‚ö†Ô∏è  –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª: ${sizeMB.toFixed(1)}MB (–ª–∏–º–∏—Ç: ${MAX_FILE_SIZE_MB}MB)`);
    console.warn(`   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç`);
  }

  console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${sizeMB.toFixed(1)}MB`);
}

// –ü–æ—Ç–æ–∫–æ–≤–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ)
async function readFileStream(filePath: string, chunkSize: number, overlapPercent: number): Promise<ChunkData[]> {
  const absolutePath = path.isAbsolute(filePath) ? filePath : path.resolve(process.cwd(), filePath);

  return new Promise((resolve, reject) => {
    const stream = fs.createReadStream(absolutePath, { encoding: 'utf8' });
    let buffer = '';
    let chunkIndex = 0;
    const chunks: ChunkData[] = [];
    const overlapSize = Math.floor((chunkSize * overlapPercent) / 100);
    const step = Math.max(1, chunkSize - overlapSize);

    stream.on('data', (chunk: Buffer | string) => {
      buffer += chunk.toString();

      while (buffer.length >= chunkSize) {
        const text = buffer.slice(0, chunkSize).trim();
        if (text.length > 0) {
          chunks.push({ text, index: chunkIndex++ });
        }
        buffer = buffer.slice(step);
      }
    });

    stream.on('end', () => {
      // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è –±—É—Ñ–µ—Ä
      if (buffer.trim().length > 0) {
        chunks.push({ text: buffer.trim(), index: chunkIndex++ });
      }
      resolve(chunks);
    });

    stream.on('error', reject);
  });
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∞–Ω–∫–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—Ç—Ä–æ–∫
function* splitTextToChunks(text: string, chunkSize: number, overlapPercent: number): Generator<ChunkData> {
  if (chunkSize <= 0) throw new Error('chunkSize –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0');
  if (overlapPercent < 0 || overlapPercent >= 100) throw new Error('overlap –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 100)');

  const overlapSize = Math.floor((chunkSize * overlapPercent) / 100);
  const step = Math.max(1, chunkSize - overlapSize);

  let index = 0;
  for (let start = 0; start < text.length; start += step) {
    const end = Math.min(text.length, start + chunkSize);
    const slice = text.slice(start, end).trim();
    if (slice.length > 0) {
      yield { text: slice, index: index++ };
    }
    if (end >= text.length) break;
  }
}

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
class LimitedQueue {
  private queue: Array<() => Promise<any>> = [];
  private running = 0;
  private maxConcurrent: number;

  constructor(maxConcurrent: number) {
    this.maxConcurrent = maxConcurrent;
  }

  async add<T>(task: () => Promise<T>): Promise<T> {
    return new Promise((resolve, reject) => {
      this.queue.push(async () => {
        try {
          const result = await task();
          resolve(result);
        } catch (error) {
          reject(error);
        }
      });
      this.process();
    });
  }

  private async process() {
    if (this.running >= this.maxConcurrent || this.queue.length === 0) {
      return;
    }

    this.running++;
    const task = this.queue.shift()!;

    try {
      await task();
    } finally {
      this.running--;
      this.process();
    }
  }
}

async function initGoogleAuth() {
  const credentialsPathCandidates = [
    path.join(__dirname, '../credentials.json'),
    path.join(process.cwd(), 'credentials.json'),
  ];

  let credentials: any | null = null;
  for (const candidate of credentialsPathCandidates) {
    if (fs.existsSync(candidate)) {
      const raw = fs.readFileSync(candidate, 'utf8');
      credentials = JSON.parse(raw);
      break;
    }
  }

  if (!credentials) {
    return null;
  }

  const auth = new google.auth.GoogleAuth({
    credentials,
    scopes: [
      'https://www.googleapis.com/auth/drive.readonly',
      'https://www.googleapis.com/auth/documents.readonly',
    ],
  });
  const authClient = await auth.getClient();
  return authClient;
}

function httpGet(url: string): Promise<{ buffer: Buffer; contentType: string; statusCode: number; headers: any }> {
  return new Promise((resolve, reject) => {
    https
      .get(url, (res) => {
        const statusCode = res.statusCode || 0;
        const contentType = String(res.headers['content-type'] || '');
        const headers = res.headers;
        const data: Buffer[] = [];
        res
          .on('data', (chunk) => data.push(Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk)))
          .on('end', () => resolve({ buffer: Buffer.concat(data), contentType, statusCode, headers }))
          .on('error', reject);
      })
      .on('error', reject);
  });
}

function htmlDecode(text: string): string {
  return text
    .replace(/&nbsp;/g, ' ')
    .replace(/&amp;/g, '&')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, "'");
}

function stripHtml(html: string): string {
  const withoutScripts = html.replace(/<script[\s\S]*?<\/script>/gi, '');
  const withoutStyles = withoutScripts.replace(/<style[\s\S]*?<\/style>/gi, '');
  const text = withoutStyles.replace(/<[^>]+>/g, ' ');
  return htmlDecode(text).replace(/\s+\n/g, '\n').replace(/\n{3,}/g, '\n\n').trim();
}

function parseTitleFromHtml(html: string, fallback: string): string {
  const m = html.match(/<title>([^<]+)<\/title>/i);
  if (!m) return fallback;
  const raw = m[1].trim();
  return raw.replace(/\s*-\s*Google\s+Docs\s*$/i, '') || fallback;
}

async function tryDownloadPublicDocsTxt(fileId: string): Promise<DriveDownloadResult | null> {
  const url = `https://docs.google.com/document/d/${fileId}/export?format=txt`;
  const { buffer, statusCode, contentType } = await httpGet(url);
  if (statusCode === 200 && contentType.includes('text/plain')) {
    return { fileName: `${fileId}.txt`, content: buffer.toString('utf8') };
  }
  return null;
}

async function tryDownloadPublicDocsMobileBasic(fileId: string): Promise<DriveDownloadResult | null> {
  const url = `https://docs.google.com/document/d/${fileId}/mobilebasic`;
  const { buffer, statusCode } = await httpGet(url);
  if (statusCode === 200) {
    const html = buffer.toString('utf8');
    const title = parseTitleFromHtml(html, fileId);
    const content = stripHtml(html);
    return { fileName: `${title}.txt`, content };
  }
  return null;
}

async function tryDownloadPublicDriveUc(fileId: string): Promise<DriveDownloadResult | null> {
  const url = `https://drive.google.com/uc?export=download&id=${fileId}`;
  const { buffer, statusCode } = await httpGet(url);
  if (statusCode === 200) {
    const text = buffer.toString('utf8');
    return { fileName: `${fileId}`, content: text };
  }
  return null;
}

async function downloadFromDrive(fileId: string): Promise<DriveDownloadResult> {
  try {
    const viaTxt = await tryDownloadPublicDocsTxt(fileId);
    if (viaTxt) return viaTxt;
  } catch {}
  try {
    const viaMobile = await tryDownloadPublicDocsMobileBasic(fileId);
    if (viaMobile) return viaMobile;
  } catch {}
  try {
    const viaUc = await tryDownloadPublicDriveUc(fileId);
    if (viaUc) return viaUc;
  } catch {}

  const drive = google.drive({ version: 'v3' });

  const meta = await drive.files.get({ fileId, fields: 'id, name, mimeType' });
  const name = `${fileId}.txt`;
  const mimeType = meta.data.mimeType || 'application/octet-stream';

  if (mimeType.startsWith('application/vnd.google-apps.document')) {
    const res = await drive.files.export({ fileId, mimeType: 'text/plain' }, { responseType: 'arraybuffer' });
    const buffer = Buffer.from(res.data as ArrayBuffer);
    return { fileName: name.endsWith('.txt') ? name : `${name}.txt`, content: buffer.toString('utf8') };
  }

  const res = await drive.files.get({ fileId, alt: 'media' }, { responseType: 'arraybuffer' });
  const buffer = Buffer.from(res.data as ArrayBuffer);
  return { fileName: name, content: buffer.toString('utf8') };
}

async function deleteCollectionIfExists(collectionName: string): Promise<void> {
  try {
    await qdrant.getCollection(collectionName);
    console.log(`üóëÔ∏è  –£–¥–∞–ª—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é "${collectionName}"...`);
    await qdrant.deleteCollection(collectionName);
    console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è "${collectionName}" —É–¥–∞–ª–µ–Ω–∞`);
  } catch {
    console.log(`‚ÑπÔ∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è "${collectionName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —É–¥–∞–ª–µ–Ω–∏–µ`);
  }
}

async function createCollection(collectionName: string): Promise<void> {
  console.log(`üìö –°–æ–∑–¥–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é "${collectionName}"...`);
  await qdrant.createCollection(collectionName, {
    vectors: { size: 1536, distance: 'Cosine' },
  });
  console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è "${collectionName}" —Å–æ–∑–¥–∞–Ω–∞`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ —á–∞–Ω–∫–æ–≤
async function processBatch(
  chunks: ChunkData[],
  fileName: string,
  queue: LimitedQueue,
  vectorCache: VectorCacheManager
): Promise<number> {
  const promises = chunks.map(chunk =>
    queue.add(async () => {
      try {
        const vector = await vectorCache.getVector(chunk.text);
        await qdrant.upsert(configuration.vectorDBName, {
          points: [
            {
              id: uuidv4(),
              vector,
              payload: {
                text: chunk.text,
                headers: [fileName],
                section: 'IMPORT',
                chapter: fileName,
                file: fileName,
                index: chunk.index,
              },
            },
          ],
        });
        return true;
      } catch (e) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞–Ω–∫–∞ ${chunk.index + 1}:`, e);
        return false;
      }
    })
  );

  const results = await Promise.all(promises);
  return results.filter(Boolean).length;
}

async function main() {
  const args = parseArgs(process.argv);
  const filePath = (args.path as string) || '';
  const driveFileId = (args.drive as string) || '';
  const chunkSize = Number(args.chunkSize || 2000);
  const overlap = Number(args.overlap || 5);
  const batchSize = Number(args.batchSize || BATCH_SIZE);
  const maxConcurrent = Number(args.maxConcurrent || MAX_CONCURRENT_REQUESTS);

  if (!filePath && !driveFileId) {
    console.log(`
–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏ –∏–º–ø–æ—Ä—Ç –≤ Qdrant (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npx ts-node src/upload-file.ts --path /absolute/path/to/file.txt [--chunkSize 2000] [--overlap 5] [--batchSize 50] [--maxConcurrent 5]
  npx ts-node src/upload-file.ts --drive <GOOGLE_DRIVE_FILE_ID> [--chunkSize 2000] [--overlap 5] [--batchSize 50] [--maxConcurrent 5]

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
  - –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
  - –ë–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Qdrant
  - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
`);
    process.exit(1);
  }

  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Qdrant...');
  await qdrant.getCollections();
  console.log('‚úÖ Qdrant –¥–æ—Å—Ç—É–ø–µ–Ω');

  logMemoryUsage('–Ω–∞—á–∞–ª–æ');

  let fileData: { fileName: string; content: string };
  if (driveFileId) {
    console.log(`üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª –∏–∑ Google Drive: ${driveFileId}`);
    fileData = await downloadFromDrive(driveFileId);
  } else {
    console.log(`üìñ –ß–∏—Ç–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${filePath}`);
    checkFileSize(filePath);
    fileData = readLocalFile(filePath);
  }

  console.log(`‚úÇÔ∏è  –†–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞–Ω–∫–∏: chunkSize=${chunkSize}, overlap=${overlap}%`);
  console.log(`üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: ${batchSize}, –º–∞–∫—Å. –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${maxConcurrent}`);

  if (LOW_MEMORY_MODE) {
    console.log(`üîß –†–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –ø–∞–º—è—Ç–∏: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π RAM`);
    console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${MAX_FILE_SIZE_MB}MB`);
    console.log(`   –ü–æ—Ä–æ–≥ –ø–∞–º—è—Ç–∏: ${MEMORY_THRESHOLD_MB}MB`);
  }

  // –ü–æ–ª–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ –±–∞–∑—ã (–∫–æ–ª–ª–µ–∫—Ü–∏–∏)
  await deleteCollectionIfExists(configuration.vectorDBName);
  await createCollection(configuration.vectorDBName);

  // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –∫—ç—à –≤–µ–∫—Ç–æ—Ä–æ–≤
  const queue = new LimitedQueue(maxConcurrent);
  const vectorCache = new VectorCacheManager();

  console.log('üöö –ó–∞–≥—Ä—É–∂–∞—é —á–∞–Ω–∫–∏ –≤ Qdrant...');

  let totalUploaded = 0;
  let totalProcessed = 0;
  let batch: ChunkData[] = [];

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤
  const chunkGenerator = splitTextToChunks(fileData.content, chunkSize, overlap);

  for (const chunk of chunkGenerator) {
    batch.push(chunk);
    totalProcessed++;

    // –ö–æ–≥–¥–∞ –±–∞—Ç—á –∑–∞–ø–æ–ª–Ω–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    if (batch.length >= batchSize) {
      const uploaded = await processBatch(batch, fileData.fileName, queue, vectorCache);
      totalUploaded += uploaded;

      console.log(`   ‚úî –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${totalUploaded}`);
      logMemoryUsage(`–±–∞—Ç—á ${Math.floor(totalProcessed / batchSize)}`);

      // –û—á–∏—â–∞–µ–º –±–∞—Ç—á –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
      batch = [];
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞–Ω–∫–∏
  if (batch.length > 0) {
    const uploaded = await processBatch(batch, fileData.fileName, queue, vectorCache);
    totalUploaded += uploaded;
    console.log(`   ‚úî –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${totalUploaded}`);
  }

  logMemoryUsage('–∫–æ–Ω–µ—Ü');

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
  const cacheStats = vectorCache.getCacheStats();
  console.log(`üíæ –ö—ç—à –≤–µ–∫—Ç–æ—Ä–æ–≤: ${cacheStats.total} –∑–∞–ø–∏—Å–µ–π, ${(cacheStats.size / 1024 / 1024).toFixed(2)}MB`);

  console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω');
  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: ${totalProcessed}`);
  console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞–Ω–∫–æ–≤: ${totalUploaded}`);
  console.log(`üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${((totalUploaded / totalProcessed) * 100).toFixed(1)}%`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function readLocalFile(filePath: string): { fileName: string; content: string } {
  const absolutePath = path.isAbsolute(filePath) ? filePath : path.resolve(process.cwd(), filePath);
  const content = fs.readFileSync(absolutePath, 'utf8');
  return { fileName: path.basename(absolutePath), content };
}

main().catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});



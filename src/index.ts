import { v4 as uuidv4 } from 'uuid';

import { qdrant } from './qdrant';
import { configuration } from './configuration';
import { getAllMarkdownFiles, splitMarkdownToChunks, Chunk } from './read-md';
import { getEmbedding } from './openai-api'

async function main() {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ MD —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ sections
    const mdFiles = getAllMarkdownFiles('./sections');
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${mdFiles.length} MD —Ñ–∞–π–ª–æ–≤`);

    try {
        await qdrant.getCollection(configuration.vectorDBName);
        console.log('üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } catch {
        await qdrant.createCollection(configuration.vectorDBName, {
            vectors: {
                size: 1536,
                distance: 'Cosine',
            },
        });
        console.log('üìö –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è');
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    let totalChunks = 0;
    for (const [fileIndex, filePath] of mdFiles.entries()) {
        console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª ${fileIndex + 1}/${mdFiles.length}: ${filePath}`);

        try {
            const chunks = splitMarkdownToChunks(filePath);
            console.log(`   üìù –ù–∞–π–¥–µ–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤`);

            // –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            for (const [chunkIndex, chunk] of chunks.entries()) {
                const vector = await getEmbedding(chunk.body);

                await qdrant.upsert(configuration.vectorDBName, {
                    points: [
                        {
                            id: uuidv4(),
                            vector,
                            payload: {
                                text: chunk.body,
                                headers: chunk.headers,
                                section: chunk.section,
                                chapter: chunk.chapter,
                                file: chunk.file,
                                index: chunk.index,
                                globalIndex: totalChunks + chunkIndex,
                            },
                        },
                    ],
                });

                console.log(`   ‚úî –ó–∞–≥—Ä—É–∂–µ–Ω —á–∞–Ω–∫ ${chunkIndex + 1}/${chunks.length} (${chunk.headers.join(' > ')})`);
            }

            totalChunks += chunks.length;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
        }
    }

    console.log(`\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${totalChunks} —á–∞–Ω–∫–æ–≤ –∏–∑ ${mdFiles.length} —Ñ–∞–π–ª–æ–≤`);
}

main().catch(console.error);

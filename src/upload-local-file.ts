#!/usr/bin/env node

import * as fs from 'fs';
import * as path from 'path';
import { v4 as uuidv4 } from 'uuid';
import { createReadStream } from 'fs';

import { configuration } from './configuration';
import { qdrant } from './qdrant';
import { VectorCacheManager } from './vector-cache';

type ChunkData = { text: string; index: number };

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
const CHUNK_SIZE = 1000; // –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
const OVERLAP_PERCENT = 10; // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ (10%)
const BATCH_SIZE = 5; // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Qdrant (–æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
const MAX_CONCURRENT_REQUESTS = 1; // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
const MEMORY_THRESHOLD_MB = 200; // –ü–æ—Ä–æ–≥ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
const DOWNLOADS_DIR = './downloads'; // –ü–∞–ø–∫–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏

function parseArgs(argv: string[]) {
  const args: Record<string, string | number | boolean> = {};
  for (let i = 2; i < argv.length; i++) {
    const arg = argv[i];
    if (arg.startsWith('--')) {
      const key = arg.replace(/^--/, '');
      const next = argv[i + 1];
      if (!next || next.startsWith('--')) {
        args[key] = true;
      } else {
        args[key] = next;
        i++;
      }
    }
  }
  return args as {
    file?: string;
    chunkSize?: string | number;
    overlap?: string | number;
    batchSize?: string | number;
    maxConcurrent?: string | number;
  };
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
function getMemoryUsage(): { used: number; total: number; percentage: number } {
  const usage = process.memoryUsage();
  const used = Math.round(usage.heapUsed / 1024 / 1024);
  const total = Math.round(usage.heapTotal / 1024 / 1024);
  const percentage = Math.round((used / total) * 100);
  return { used, total, percentage };
}

function logMemoryUsage(context: string) {
  const { used, total, percentage } = getMemoryUsage();
  console.log(`üíæ –ü–∞–º—è—Ç—å [${context}]: ${used}MB/${total}MB (${percentage}%)`);

  if (used > MEMORY_THRESHOLD_MB) {
    console.warn(`‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${used}MB`);
  }

  if (used > 500) {
    console.error(`üö® –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ ${used}MB –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫—Ä–∞—Ö—É!`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function checkFileSize(filePath: string): void {
  const stats = fs.statSync(filePath);
  const sizeMB = stats.size / 1024 / 1024;
  console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${sizeMB.toFixed(1)}MB`);
}

// –ü–æ—Ç–æ–∫–æ–≤–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
async function readFileStream(filePath: string): Promise<string[]> {
  return new Promise((resolve, reject) => {
    const lines: string[] = [];
    const stream = createReadStream(filePath, { encoding: 'utf8' });
    let buffer = '';

    stream.on('data', (chunk: Buffer | string) => {
      buffer += chunk.toString();

      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
      const newLines = buffer.split('\n');
      buffer = newLines.pop() || ''; // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π

      for (const line of newLines) {
        const trimmedLine = line.trim();
        if (trimmedLine.length > 0) {
          lines.push(trimmedLine);
        }
      }
    });

    stream.on('end', () => {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
      if (buffer.trim().length > 0) {
        lines.push(buffer.trim());
      }
      resolve(lines);
    });

    stream.on('error', reject);
  });
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∞–Ω–∫–æ–≤ —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º
function* createChunksFromLines(lines: string[], chunkSize: number, overlapPercent: number): Generator<ChunkData> {
  if (chunkSize <= 0) throw new Error('chunkSize –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0');
  if (overlapPercent < 0 || overlapPercent >= 100) throw new Error('overlap –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 100)');

  const overlapSize = Math.floor((chunkSize * overlapPercent) / 100);
  const step = Math.max(1, chunkSize - overlapSize);

  let index = 0;
  let currentChunk = '';
  let currentLength = 0;

  for (const line of lines) {
    // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
    if (currentLength + line.length + 1 > chunkSize && currentChunk.length > 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
      yield { text: currentChunk.trim(), index: index++ };

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫ —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º
      const words = currentChunk.split(' ');
      const overlapWords = Math.floor((words.length * overlapPercent) / 100);
      const overlapText = words.slice(-overlapWords).join(' ');

      currentChunk = overlapText + ' ' + line;
      currentLength = overlapText.length + 1 + line.length;
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞–Ω–∫—É
      if (currentChunk.length > 0) {
        currentChunk += ' ' + line;
        currentLength += 1 + line.length;
      } else {
        currentChunk = line;
        currentLength = line.length;
      }
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
  if (currentChunk.trim().length > 0) {
    yield { text: currentChunk.trim(), index: index++ };
  }
}

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
class LimitedQueue {
  private queue: Array<() => Promise<any>> = [];
  private running = 0;
  private maxConcurrent: number;

  constructor(maxConcurrent: number) {
    this.maxConcurrent = maxConcurrent;
  }

  async add<T>(task: () => Promise<T>): Promise<T> {
    return new Promise((resolve, reject) => {
      this.queue.push(async () => {
        try {
          const result = await task();
          resolve(result);
        } catch (error) {
          reject(error);
        }
      });
      this.process();
    });
  }

  private async process() {
    if (this.running >= this.maxConcurrent || this.queue.length === 0) {
      return;
    }

    this.running++;
    const task = this.queue.shift()!;

    try {
      await task();
    } finally {
      this.running--;
      this.process();
    }
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
async function deleteCollectionIfExists(collectionName: string): Promise<void> {
  try {
    await qdrant.getCollection(collectionName);
    console.log(`üóëÔ∏è  –£–¥–∞–ª—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é "${collectionName}"...`);
    await qdrant.deleteCollection(collectionName);
    console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è "${collectionName}" —É–¥–∞–ª–µ–Ω–∞`);
  } catch {
    console.log(`‚ÑπÔ∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è "${collectionName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —É–¥–∞–ª–µ–Ω–∏–µ`);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
async function createCollection(collectionName: string): Promise<void> {
  console.log(`üìö –°–æ–∑–¥–∞—é –∫–æ–ª–ª–µ–∫—Ü–∏—é "${collectionName}"...`);
  await qdrant.createCollection(collectionName, {
    vectors: { size: 1536, distance: 'Cosine' },
  });
  console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è "${collectionName}" —Å–æ–∑–¥–∞–Ω–∞`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ —á–∞–Ω–∫–æ–≤
async function processBatch(
  chunks: ChunkData[],
  fileName: string,
  queue: LimitedQueue,
  vectorCache: VectorCacheManager
): Promise<number> {
  const promises = chunks.map(chunk =>
    queue.add(async () => {
      try {
        const vector = await vectorCache.getVector(chunk.text);
        await qdrant.upsert(configuration.vectorDBName, {
          points: [
            {
              id: uuidv4(),
              vector,
              payload: {
                text: chunk.text,
                headers: [fileName],
                section: 'IMPORT',
                chapter: fileName,
                file: fileName,
                index: chunk.index,
              },
            },
          ],
        });
        return true;
      } catch (e) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞–Ω–∫–∞ ${chunk.index + 1}:`, e);
        return false;
      }
    })
  );

  const results = await Promise.all(promises);
  return results.filter(Boolean).length;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ downloads
function getDownloadFiles(): string[] {
  if (!fs.existsSync(DOWNLOADS_DIR)) {
    console.error(`‚ùå –ü–∞–ø–∫–∞ ${DOWNLOADS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return [];
  }

  const files = fs.readdirSync(DOWNLOADS_DIR)
    .filter(file => file.endsWith('.txt'))
    .map(file => path.join(DOWNLOADS_DIR, file));

  return files;
}

async function main() {
  const args = parseArgs(process.argv);
  const fileName = (args.file as string) || '';
  const chunkSize = Number(args.chunkSize || CHUNK_SIZE);
  const overlap = Number(args.overlap || OVERLAP_PERCENT);
  const batchSize = Number(args.batchSize || BATCH_SIZE);
  const maxConcurrent = Number(args.maxConcurrent || MAX_CONCURRENT_REQUESTS);

  console.log(`
üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ downloads –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npx ts-node src/upload-local-file.ts [--file filename.txt] [--chunkSize 1000] [--overlap 10] [--batchSize 5] [--maxConcurrent 1]

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
  --file: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ downloads (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ .txt —Ñ–∞–π–ª—ã)
  --chunkSize: —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${CHUNK_SIZE})
  --overlap: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ –≤ % (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${OVERLAP_PERCENT}%)
  --batchSize: —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${BATCH_SIZE})
  --maxConcurrent: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${MAX_CONCURRENT_REQUESTS})
`);

  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Qdrant...');
  await qdrant.getCollections();
  console.log('‚úÖ Qdrant –¥–æ—Å—Ç—É–ø–µ–Ω');

  logMemoryUsage('–Ω–∞—á–∞–ª–æ');

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const downloadFiles = getDownloadFiles();
  if (downloadFiles.length === 0) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ .txt —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ downloads');
    process.exit(1);
  }

  const filesToProcess = fileName
    ? downloadFiles.filter(f => path.basename(f) === fileName)
    : downloadFiles;

  if (filesToProcess.length === 0) {
    console.error(`‚ùå –§–∞–π–ª ${fileName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ downloads`);
    process.exit(1);
  }

  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${filesToProcess.length}`);

  // –ü–æ–ª–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ –±–∞–∑—ã (–∫–æ–ª–ª–µ–∫—Ü–∏–∏)
  await deleteCollectionIfExists(configuration.vectorDBName);
  await createCollection(configuration.vectorDBName);

  // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –∫—ç—à –≤–µ–∫—Ç–æ—Ä–æ–≤
  const queue = new LimitedQueue(maxConcurrent);
  const vectorCache = new VectorCacheManager();

  let totalUploaded = 0;
  let totalProcessed = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  for (const filePath of filesToProcess) {
    const fileName = path.basename(filePath);
    console.log(`\nüìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: ${fileName}`);

    checkFileSize(filePath);

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Ç–æ–∫–æ–≤–æ
    console.log('üìñ –ß–∏—Ç–∞—é —Ñ–∞–π–ª –ø–æ—Ç–æ–∫–æ–≤–æ...');
    const lines = await readFileStream(filePath);
    console.log(`üìù –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${lines.length}`);

    // –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏
    console.log(`‚úÇÔ∏è  –°–æ–∑–¥–∞—é —á–∞–Ω–∫–∏: —Ä–∞–∑–º–µ—Ä=${chunkSize}, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ=${overlap}%`);
    const chunkGenerator = createChunksFromLines(lines, chunkSize, overlap);

    let batch: ChunkData[] = [];
    let fileProcessed = 0;
    let fileUploaded = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫–∏ –±–∞—Ç—á–∞–º–∏
    for (const chunk of chunkGenerator) {
      batch.push(chunk);
      fileProcessed++;
      totalProcessed++;

      // –ö–æ–≥–¥–∞ –±–∞—Ç—á –∑–∞–ø–æ–ª–Ω–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
      if (batch.length >= batchSize) {
        const uploaded = await processBatch(batch, fileName, queue, vectorCache);
        fileUploaded += uploaded;
        totalUploaded += uploaded;

        console.log(`   üì¶ –§–∞–π–ª ${fileName}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${fileProcessed}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${fileUploaded}`);
        logMemoryUsage(`—Ñ–∞–π–ª ${fileName}, –±–∞—Ç—á ${Math.floor(fileProcessed / batchSize)}`);

        // –û—á–∏—â–∞–µ–º –±–∞—Ç—á –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        batch = [];

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞–Ω–∫–∏
    if (batch.length > 0) {
      const uploaded = await processBatch(batch, fileName, queue, vectorCache);
      fileUploaded += uploaded;
      totalUploaded += uploaded;
      console.log(`   üì¶ –§–∞–π–ª ${fileName}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${fileProcessed}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${fileUploaded}`);
    }

    console.log(`‚úÖ –§–∞–π–ª ${fileName} –∑–∞–≤–µ—Ä—à–µ–Ω: ${fileUploaded}/${fileProcessed} —á–∞–Ω–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ`);
  }

  logMemoryUsage('–∫–æ–Ω–µ—Ü');

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
  const cacheStats = vectorCache.getCacheStats();
  console.log(`üíæ –ö—ç—à –≤–µ–∫—Ç–æ—Ä–æ–≤: ${cacheStats.total} –∑–∞–ø–∏—Å–µ–π, ${(cacheStats.size / 1024 / 1024).toFixed(2)}MB`);

  console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω');
  console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: ${totalProcessed}`);
  console.log(`üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞–Ω–∫–æ–≤: ${totalUploaded}`);
  console.log(`üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${((totalUploaded / totalProcessed) * 100).toFixed(1)}%`);
}

main().catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});

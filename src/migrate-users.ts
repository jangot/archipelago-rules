import { configuration } from './configuration';
import { userAccessManager } from './user-access';

async function migrateUsersFromEnv() {
    console.log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ .env –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');

    const kingsFromEnv = configuration.kings;
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${kingsFromEnv.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ .env:`, kingsFromEnv);

    let migratedCount = 0;
    let skippedCount = 0;

    for (const [i, king] of kingsFromEnv.entries()) {
        if (!king.trim()) continue;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ ID –∏–ª–∏ username
        const isNumeric = /^\d+$/.test(king.trim());
        const isAdmin = i === 0; // –ü–µ—Ä–≤—ã–π ‚Äî –∞–¥–º–∏–Ω

        if (isNumeric) {
            // –≠—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const success = userAccessManager.addUser({
                id: king.trim(),
                addedBy: 'system-migration'
            }, 'system-migration', isAdmin);

            if (success) {
                migratedCount++;
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: ${king.trim()}${isAdmin ? ' (–∞–¥–º–∏–Ω)' : ''}`);
            } else {
                skippedCount++;
                console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${king.trim()} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            }
        } else {
            // –≠—Ç–æ username
            const success = userAccessManager.addUser({
                id: '', // ID –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º, –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ username
                username: king.trim(),
                addedBy: 'system-migration'
            }, 'system-migration', isAdmin);

            if (success) {
                migratedCount++;
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username: ${king.trim()}${isAdmin ? ' (–∞–¥–º–∏–Ω)' : ''}`);
            } else {
                skippedCount++;
                console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username ${king.trim()} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            }
        }
    }

    const stats = userAccessManager.getStats();

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log(`   - –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${migratedCount}`);
    console.log(`   - –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): ${skippedCount}`);
    console.log(`   - –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: ${stats.total}`);
    console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active}`);
    console.log(`   - –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.inactive}`);

    console.log('\nüìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: data/users.json');
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateUsersFromEnv().catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
});
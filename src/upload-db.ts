import { v4 as uuidv4 } from 'uuid';

import { qdrant } from './qdrant';
import { configuration } from './configuration';
import { getAllMarkdownFiles, splitMarkdownToChunks, Chunk } from './read-md';
import { getEmbedding } from './openai-api'

async function checkServices() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Qdrant
    try {
        await qdrant.getCollections();
        console.log('‚úÖ Qdrant –¥–æ—Å—Ç—É–ø–µ–Ω');
    } catch (error) {
        console.error('‚ùå Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        throw new Error('Qdrant —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ' + configuration.qdrantUrl);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI API
    try {
        await getEmbedding('test');
        console.log('‚úÖ OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω');
    } catch (error) {
        console.error('‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        throw new Error('OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
    }
}

async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ markdown —Ñ–∞–π–ª–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    await checkServices();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ MD —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ rules
    const mdFiles = getAllMarkdownFiles('./rules');
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${mdFiles.length} MD —Ñ–∞–π–ª–æ–≤`);

    if (mdFiles.length === 0) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ markdown —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ ./rules');
        return;
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        try {
            await qdrant.getCollection(configuration.vectorDBName);
            console.log('üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

            // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é
            console.log('‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ VECTOR_DB_NAME –≤ .env');
            return;
        } catch {
            // –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
            await qdrant.createCollection(configuration.vectorDBName, {
                vectors: {
                    size: 1536,
                    distance: 'Cosine',
                },
            });
            console.log('üìö –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è');
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        let totalChunks = 0;
        let processedFiles = 0;
        let errorFiles = 0;

        for (const [fileIndex, filePath] of mdFiles.entries()) {
            console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª ${fileIndex + 1}/${mdFiles.length}: ${filePath}`);

            try {
                const chunks = splitMarkdownToChunks(filePath);
                console.log(`   üìù –ù–∞–π–¥–µ–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤`);

                if (chunks.length === 0) {
                    console.log(`   ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
                    continue;
                }

                // –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
                for (const [chunkIndex, chunk] of chunks.entries()) {
                    try {
                        const vector = await getEmbedding(chunk.body);

                        await qdrant.upsert(configuration.vectorDBName, {
                            points: [
                                {
                                    id: uuidv4(),
                                    vector,
                                    payload: {
                                        text: chunk.body,
                                        headers: chunk.headers,
                                        section: chunk.section,
                                        chapter: chunk.chapter,
                                        file: chunk.file,
                                        index: chunk.index,
                                        globalIndex: totalChunks + chunkIndex,
                                    },
                                },
                            ],
                        });

                        console.log(`   ‚úî –ó–∞–≥—Ä—É–∂–µ–Ω —á–∞–Ω–∫ ${chunkIndex + 1}/${chunks.length} (${chunk.headers.join(' > ')})`);
                    } catch (chunkError) {
                        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ ${chunkIndex + 1}:`, chunkError);
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —á–∞–Ω–∫–æ–≤
                    }
                }

                totalChunks += chunks.length;
                processedFiles++;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
                errorFiles++;
            }
        }

        console.log(`\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!`);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedFiles}/${mdFiles.length}`);
        console.log(`   - –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: ${errorFiles}`);
        console.log(`   - –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞–Ω–∫–æ–≤: ${totalChunks}`);

        if (errorFiles > 0) {
            console.log(`‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫`);
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

main().catch((error) => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});

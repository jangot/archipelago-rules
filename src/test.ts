import { getAllMarkdownFiles, splitMarkdownToChunks } from './read-md';

async function testMarkdownParsing() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ markdown —Ñ–∞–π–ª–æ–≤...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ MD —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ rules
    const mdFiles = getAllMarkdownFiles('./rules');
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${mdFiles.length} MD —Ñ–∞–π–ª–æ–≤`);

    if (mdFiles.length === 0) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ markdown —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ ./rules');
        return;
    }

    let totalChunks = 0;
    let processedFiles = 0;
    let errorFiles = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testFiles = mdFiles.slice(0, 3);

    for (const [fileIndex, filePath] of testFiles.entries()) {
        console.log(`\nüìÑ –¢–µ—Å—Ç–∏—Ä—É—é —Ñ–∞–π–ª ${fileIndex + 1}/${testFiles.length}: ${filePath}`);

        try {
            const chunks = splitMarkdownToChunks(filePath);
            console.log(`   üìù –ù–∞–π–¥–µ–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤`);

            if (chunks.length === 0) {
                console.log(`   ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
                continue;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —á–∞–Ω–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            for (const [chunkIndex, chunk] of chunks.slice(0, 2).entries()) {
                console.log(`   üìÑ –ß–∞–Ω–∫ ${chunkIndex + 1}:`);
                console.log(`      –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${chunk.headers.join(' > ')}`);
                console.log(`      –†–∞–∑–¥–µ–ª: ${chunk.section}`);
                console.log(`      –ì–ª–∞–≤–∞: ${chunk.chapter}`);
                console.log(`      –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${chunk.body.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                console.log(`      –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: ${chunk.body.substring(0, 100)}...`);
                console.log('');
            }

            totalChunks += chunks.length;
            processedFiles++;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
            errorFiles++;
        }
    }

    console.log(`\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedFiles}/${testFiles.length}`);
    console.log(`   - –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: ${errorFiles}`);
    console.log(`   - –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: ${totalChunks}`);

    if (errorFiles === 0) {
        console.log(`üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å Qdrant.`);
    } else {
        console.log(`‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–æ–≤.`);
    }
}

testMarkdownParsing().catch((error) => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});

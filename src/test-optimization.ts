#!/usr/bin/env node

import * as fs from 'fs';
import * as path from 'path';
import { VectorCacheManager } from './vector-cache';
import { PerformanceMonitor } from './performance-monitor';

interface TestResult {
  testName: string;
  duration: number;
  memoryPeak: number;
  memoryAverage: number;
  success: boolean;
  error?: string;
}

class OptimizationTester {
  private testResults: TestResult[] = [];
  private testData: string;

  constructor() {
    this.testData = this.generateTestData();
  }

  private generateTestData(): string {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const paragraphs = [
      "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤. " +
      "–û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è " +
      "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤.",

      "–í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞, –≤–∫–ª—é—á–∞—è " +
      "—Ä–∞–∑–±–∏–≤–∫—É –Ω–∞ —á–∞–Ω–∫–∏, –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –∑–∞–≥—Ä—É–∑–∫—É –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. " +
      "–≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π.",

      "–¢—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, " +
      "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–∞–º—è—Ç–∏. –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã " +
      "–¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏."
    ];

    // –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç, –ø–æ–≤—Ç–æ—Ä—è—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    let result = '';
    for (let i = 0; i < 1000; i++) {
      result += paragraphs[i % paragraphs.length] + '\n\n';
    }

    return result;
  }

  private getMemoryUsage(): number {
    const usage = process.memoryUsage();
    return Math.round(usage.heapUsed / 1024 / 1024);
  }

  private async runTest(testName: string, testFn: () => Promise<void>): Promise<TestResult> {
    console.log(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testName}`);

    const startTime = Date.now();
    const startMemory = this.getMemoryUsage();
    const memoryReadings: number[] = [startMemory];

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 100–º—Å
    const memoryInterval = setInterval(() => {
      memoryReadings.push(this.getMemoryUsage());
    }, 100);

    try {
      await testFn();

      clearInterval(memoryInterval);

      const duration = Date.now() - startTime;
      const memoryPeak = Math.max(...memoryReadings);
      const memoryAverage = Math.round(memoryReadings.reduce((a, b) => a + b, 0) / memoryReadings.length);

      const result: TestResult = {
        testName,
        duration,
        memoryPeak,
        memoryAverage,
        success: true
      };

      console.log(`‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${duration}–º—Å, –ø–∞–º—è—Ç—å: ${memoryPeak}MB (–ø–∏–∫), ${memoryAverage}MB (—Å—Ä–µ–¥–Ω–µ–µ)`);
      return result;

    } catch (error) {
      clearInterval(memoryInterval);

      const result: TestResult = {
        testName,
        duration: Date.now() - startTime,
        memoryPeak: Math.max(...memoryReadings),
        memoryAverage: Math.round(memoryReadings.reduce((a, b) => a + b, 0) / memoryReadings.length),
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };

      console.log(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${result.error}`);
      return result;
    }
  }

  async testVectorCache(): Promise<void> {
    const cache = new VectorCacheManager('./test-cache');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    const text1 = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è";
    const text2 = "–î—Ä—É–≥–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç";

    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∫—ç—à
    await cache.getVector(text1);

    // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
    await cache.getVector(text1);

    // –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    await cache.getVector(text2);

    const stats = cache.getCacheStats();
    console.log(`üìä –ö—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç ${stats.total} –∑–∞–ø–∏—Å–µ–π`);

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫—ç—à
    cache.clearCache();
  }

  async testPerformanceMonitor(): Promise<void> {
    const monitor = new PerformanceMonitor('./test-metrics');

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–µ–π
    for (let i = 0; i < 5; i++) {
      monitor.startBatch(50, 5);

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await new Promise(resolve => setTimeout(resolve, 100));

      monitor.endBatch(50, 48); // 2 –æ—à–∏–±–∫–∏
    }

    const report = monitor.getPerformanceReport();
    console.log(`üìà –û—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${report.averageSpeed} —á–∞–Ω–∫–æ–≤/—Å, ${report.averageMemory}MB –ø–∞–º—è—Ç–∏`);
  }

  async testMemoryEfficiency(): Promise<void> {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    const largeText = this.testData;
    const chunks: string[] = [];

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ (–∏–º–∏—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
    const chunkSize = 2000;
    const overlap = 5;
    const overlapSize = Math.floor((chunkSize * overlap) / 100);
    const step = Math.max(1, chunkSize - overlapSize);

    for (let start = 0; start < largeText.length; start += step) {
      const end = Math.min(largeText.length, start + chunkSize);
      const slice = largeText.slice(start, end).trim();
      if (slice.length > 0) {
        chunks.push(slice);
      }
      if (end >= largeText.length) break;
    }

    console.log(`üìù –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–º ${(largeText.length / 1024 / 1024).toFixed(2)}MB`);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞–º–∏
    const batchSize = 50;
    for (let i = 0; i < chunks.length; i += batchSize) {
      const batch = chunks.slice(i, i + batchSize);

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞
      await new Promise(resolve => setTimeout(resolve, 50));

      if (i % (batchSize * 10) === 0) {
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Math.min(i + batchSize, chunks.length)}/${chunks.length} —á–∞–Ω–∫–æ–≤`);
      }
    }
  }

  async testConcurrentLimiting(): Promise<void> {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    const maxConcurrent = 3;
    const totalTasks = 10;
    let running = 0;
    let completed = 0;

    const tasks = Array.from({ length: totalTasks }, (_, i) => async () => {
      running++;
      console.log(`   –ó–∞–¥–∞—á–∞ ${i + 1} –∑–∞–ø—É—â–µ–Ω–∞ (–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${running})`);

      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
      await new Promise(resolve => setTimeout(resolve, 200));

      running--;
      completed++;
      console.log(`   –ó–∞–¥–∞—á–∞ ${i + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${running}, –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${completed})`);
    });

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
    const queue = tasks.slice();
    const workers: Promise<void>[] = [];

    for (let i = 0; i < maxConcurrent; i++) {
      workers.push(this.worker(queue));
    }

    await Promise.all(workers);
    console.log(`‚úÖ –í—Å–µ ${totalTasks} –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω—ã`);
  }

  private async worker(queue: (() => Promise<void>)[]): Promise<void> {
    while (queue.length > 0) {
      const task = queue.shift();
      if (task) {
        await task();
      }
    }
  }

  async runAllTests(): Promise<void> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...\n');

    this.testResults = [
      await this.runTest('–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤', () => this.testVectorCache()),
      await this.runTest('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', () => this.testPerformanceMonitor()),
      await this.runTest('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏', () => this.testMemoryEfficiency()),
      await this.runTest('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏', () => this.testConcurrentLimiting()),
    ];

    this.printResults();
    this.cleanup();
  }

  private printResults(): void {
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
    console.log('='.repeat(80));

    const successful = this.testResults.filter(r => r.success);
    const failed = this.testResults.filter(r => !r.success);

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successful.length}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${failed.length}\n`);

    this.testResults.forEach(result => {
      const status = result.success ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${result.testName}`);
      console.log(`   –í—Ä–µ–º—è: ${result.duration}–º—Å`);
      console.log(`   –ü–∞–º—è—Ç—å: ${result.memoryPeak}MB (–ø–∏–∫), ${result.memoryAverage}MB (—Å—Ä–µ–¥–Ω–µ–µ)`);
      if (result.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
      }
      console.log('');
    });

    if (successful.length > 0) {
      const avgDuration = successful.reduce((sum, r) => sum + r.duration, 0) / successful.length;
      const avgMemory = successful.reduce((sum, r) => sum + r.memoryAverage, 0) / successful.length;

      console.log(`üìà –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:`);
      console.log(`   –í—Ä–µ–º—è: ${Math.round(avgDuration)}–º—Å`);
      console.log(`   –ü–∞–º—è—Ç—å: ${Math.round(avgMemory)}MB`);
    }
  }

  private cleanup(): void {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    const testDirs = ['./test-cache', './test-metrics'];

    testDirs.forEach(dir => {
      if (fs.existsSync(dir)) {
        fs.rmSync(dir, { recursive: true, force: true });
        console.log(`üßπ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥: ${dir}`);
      }
    });
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new OptimizationTester();
  await tester.runAllTests();
}

if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  });
}

import { userAccessManager } from './user-access';

const command = process.argv[2];
const args = process.argv.slice(3);

function showHelp() {
    console.log(`
üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ê—Ä—Ö–∏–ø–µ–ª–∞–≥ Rules Bot

üìã –ö–æ–º–∞–Ω–¥—ã:
  list                    - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  stats                   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  add <username>          - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
  add-id <id>             - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  remove <username>       - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  activate <username>     - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  delete <username>       - –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  help                    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –ü—Ä–∏–º–µ—Ä—ã:
  npm run manage-users list
  npm run manage-users add jangot
  npm run manage-users add-id 123456789
  npm run manage-users remove someuser
  npm run manage-users stats
    `);
}

async function main() {
    switch (command) {
        case 'list':
            const users = userAccessManager.getAllUsers();
            if (users.length === 0) {
                console.log('üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            } else {
                console.log('üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
                users.forEach((user, index) => {
                    const status = user.isActive ? '‚úÖ' : '‚ùå';
                    const type = user.id ? 'ID' : 'Username';
                    const identifier = user.id || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                    console.log(`${index + 1}. ${status} ${type}: ${identifier} (–¥–æ–±–∞–≤–ª–µ–Ω: ${new Date(user.addedAt).toLocaleDateString()})`);
                });
            }
            break;

        case 'stats':
            const stats = userAccessManager.getStats();
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
            console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}`);
            console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active}`);
            console.log(`   –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.inactive}`);
            console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(stats.lastUpdated).toLocaleString()}`);
            break;

        case 'add':
            if (!args[0]) {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ username: npm run manage-users add <username>');
                return;
            }
            const success = userAccessManager.addUser({
                id: '',
                username: args[0],
                addedBy: 'cli'
            }, 'cli');
            if (success) {
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –¥–æ–±–∞–≤–ª–µ–Ω!`);
            } else {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`);
            }
            break;

        case 'add-id':
            if (!args[0]) {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ ID: npm run manage-users add-id <id>');
                return;
            }
            const successId = userAccessManager.addUser({
                id: args[0],
                addedBy: 'cli'
            }, 'cli');
            if (successId) {
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${args[0]} –¥–æ–±–∞–≤–ª–µ–Ω!`);
            } else {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${args[0]} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`);
            }
            break;

        case 'remove':
            if (!args[0]) {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ username: npm run manage-users remove <username>');
                return;
            }
            const removed = userAccessManager.removeUser('', args[0]);
            if (removed) {
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`);
            } else {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            break;

        case 'activate':
            if (!args[0]) {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ username: npm run manage-users activate <username>');
                return;
            }
            const activated = userAccessManager.activateUser('', args[0]);
            if (activated) {
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`);
            } else {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            break;

        case 'delete':
            if (!args[0]) {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ username: npm run manage-users delete <username>');
                return;
            }
            const deleted = userAccessManager.deleteUser('', args[0]);
            if (deleted) {
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω!`);
            } else {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            break;

        case 'help':
        default:
            showHelp();
            break;
    }
}

main().catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
});
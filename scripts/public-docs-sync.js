#!/usr/bin/env node

const https = require('https');
const { URL } = require('url');
const RulesSync = require('./sync-rules');

class PublicDocsSync {
    constructor() {
        this.documentId = '1ulanNBqKru7RYQ-_dLAhQuT8U7SDCWsxQtAx39wv6lM';
        this.baseUrl = 'https://docs.google.com/document/d/';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
    async fetchDocumentHTML() {
        return new Promise((resolve, reject) => {
            const url = `${this.baseUrl}${this.documentId}/mobilebasic`;

            https.get(url, (res) => {
                let data = '';

                res.on('data', (chunk) => {
                    data += chunk;
                });

                res.on('end', () => {
                    if (res.statusCode === 200) {
                        resolve(data);
                    } else {
                        reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage}`));
                    }
                });
            }).on('error', (err) => {
                reject(err);
            });
        });
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ HTML –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    parseDocumentContent(html) {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        const sections = [];
        let currentSection = null;
        let currentContent = [];

        // –†–∞–∑–±–∏–≤–∞–µ–º HTML –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const lines = html.split('\n');

        for (const line of lines) {
            const trimmedLine = line.trim();

            // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
            if (trimmedLine.includes('<h1>') || trimmedLine.includes('<h2>') || trimmedLine.includes('<h3>')) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ–∫—Ü–∏—é
                if (currentSection && currentContent.length > 0) {
                    sections.push({
                        title: currentSection,
                        content: currentContent.join('\n').trim()
                    });
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
                const titleMatch = trimmedLine.match(/<h[1-3][^>]*>(.*?)<\/h[1-3]>/);
                if (titleMatch) {
                    currentSection = titleMatch[1].trim();
                    currentContent = [];
                }
            } else if (trimmedLine.includes('<p>') || trimmedLine.includes('<div>')) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
                const textMatch = trimmedLine.match(/<[^>]*>(.*?)<\/[^>]*>/);
                if (textMatch && currentSection) {
                    const text = textMatch[1].trim();
                    if (text && text.length > 10) { // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
                        currentContent.push(text);
                    }
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
        if (currentSection && currentContent.length > 0) {
            sections.push({
                title: currentSection,
                content: currentContent.join('\n').trim()
            });
        }

        return sections;
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç –≤ HTML
    async getDocumentAsHTML() {
        const exportUrl = `https://docs.google.com/document/d/${this.documentId}/export?format=html`;

        return new Promise((resolve, reject) => {
            https.get(exportUrl, (res) => {
                let data = '';

                res.on('data', (chunk) => {
                    data += chunk;
                });

                res.on('end', () => {
                    if (res.statusCode === 200) {
                        resolve(data);
                    } else {
                        reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage}`));
                    }
                });
            }).on('error', (err) => {
                reject(err);
            });
        });
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    async syncFromPublicDocs() {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ Google Docs...');

        try {
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç HTML (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
            let htmlContent;
            try {
                console.log('üì• –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ HTML —ç–∫—Å–ø–æ—Ä—Ç...');
                htmlContent = await this.getDocumentAsHTML();
            } catch (error) {
                console.log('‚ö†Ô∏è HTML —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É...');
                const pageHTML = await this.fetchDocumentHTML();
                const sections = this.parseDocumentContent(pageHTML);

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ HTML
                htmlContent = '<html><body>';
                for (const section of sections) {
                    htmlContent += `<h1>${section.title}</h1>`;
                    htmlContent += `<p>${section.content}</p>`;
                }
                htmlContent += '</body></html>';
            }

            const rulesSync = new RulesSync();
            await rulesSync.syncRules(htmlContent);

            console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ Google Docs –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
            process.exit(1);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = PublicDocsSync;

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const sync = new PublicDocsSync();
    sync.syncFromPublicDocs();
}
#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const { JSDOM } = require('jsdom');

// –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞–∑–¥–µ–ª–æ–≤ Google Docs –Ω–∞ —Ñ–∞–π–ª—ã Markdown
const SECTION_MAPPING = {
    "–ü—Ä–µ–¥–∏—Å–ª–æ–≤–∏–µ": "01-predislovie.md",
    "–°–æ–∑–¥–∞–Ω–∏–µ –ü–µ—Ä—Å–æ–Ω–∞–∂–∞": "02-sozdanie-personazha.md",
    "–®–∞–≥ –ü–µ—Ä–≤—ã–π: –ü—Ä–∏—Ä–æ–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞": "03-shag-1-priroda.md",
    "–®–∞–≥ –í—Ç–æ—Ä–æ–π: –†–æ–¥–∏–Ω–∞": "04-shag-2-rodina.md",
    "–®–∞–≥ –¢—Ä–µ—Ç–∏–π: –ê—Ç—Ä–∏–±—É—Ç—ã": "05-shag-3-atributy.md",
    "–®–∞–≥ –ß–µ—Ç–≤—ë—Ä—Ç—ã–π: –ù–∞–≤—ã–∫–∏": "06-shag-4-navyki.md",
    "–ê—Ä—Ö–µ—Ç–∏–ø—ã": "07-arhetipy.md",
    "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ë–æ–µ—Ü": "08-tradicionnyj-boez.md",
    "–°–æ–ª–¥–∞—Ç": "09-soldat.md",
    "–ú–æ—Ä—è–∫": "10-moryak.md",
    "–ü—Ä–æ–π–¥–æ—Ö–∞": "11-projdocha.md",
    "–ü–æ–≤–µ—Å–∞": "12-povesa.md",
    "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä": "13-navigator.md",
    "–ú—É–∑—ã–∫–∞–Ω—Ç": "14-muzykant.md",
    "–ë–æ–∂–∏–π –ß–µ–ª–æ–≤–µ–∫": "15-bozhij-chelovek.md",
    "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å": "16-issledovatel.md",
    "–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å": "17-izobretatel.md",
    "–ù–∞–≤—ã–∫–∏": "18-navyki-obshchee.md",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –í–∏–¥—ã –ë–æ—è": "19-tradicionnye-vidy-boya.md",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å": "21-vynoslivost.md",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –û–≥–Ω–µ—Å—Ç—Ä–µ–ª—å–Ω–æ–µ": "22-ognestrelnoe.md",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –ú–æ—Ä–µ–ø–ª–∞–≤–∞–Ω–∏–µ": "23-moreplavanie.md",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –ó–∞—â–∏—Ç–∞": "24-zashchita.md",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –†–µ–º–µ—Å–ª–æ": "25-remeslo.md",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –ó–Ω–∞–Ω–∏—è": "26-znaniya.md",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ò–Ω—Ç–µ—Ä–∞–∫—Ü–∏–∏": "27-socialnye-interakcii.md",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ": "28-prisutstvie.md",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –ß—É–≤—Å—Ç–≤–∞": "29-chuvstva.md",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞": "30-distsiplina.md"
};

// –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
const EMOJI_MAPPING = {
    "–ü—Ä–µ–¥–∏—Å–ª–æ–≤–∏–µ": "üåä",
    "–°–æ–∑–¥–∞–Ω–∏–µ –ü–µ—Ä—Å–æ–Ω–∞–∂–∞": "üë§",
    "–®–∞–≥ –ü–µ—Ä–≤—ã–π": "üé≠",
    "–®–∞–≥ –í—Ç–æ—Ä–æ–π": "üè†",
    "–®–∞–≥ –¢—Ä–µ—Ç–∏–π": "‚ö°",
    "–®–∞–≥ –ß–µ—Ç–≤—ë—Ä—Ç—ã–π": "üéØ",
    "–ê—Ä—Ö–µ—Ç–∏–ø—ã": "üé≠",
    "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ë–æ–µ—Ü": "‚öîÔ∏è",
    "–°–æ–ª–¥–∞—Ç": "üéñÔ∏è",
    "–ú–æ—Ä—è–∫": "‚öì",
    "–ü—Ä–æ–π–¥–æ—Ö–∞": "üé≠",
    "–ü–æ–≤–µ—Å–∞": "üé©",
    "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä": "üß≠",
    "–ú—É–∑—ã–∫–∞–Ω—Ç": "üéµ",
    "–ë–æ–∂–∏–π –ß–µ–ª–æ–≤–µ–∫": "‚õ™",
    "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å": "üîç",
    "–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å": "üîß",
    "–ù–∞–≤—ã–∫–∏": "üìö",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å": "üéØ"
};

class RulesSync {
    constructor() {
        this.partsDir = path.join(__dirname, '../files/parts');
        this.changes = [];
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
    getEmoji(sectionName) {
        for (const [key, emoji] of Object.entries(EMOJI_MAPPING)) {
            if (sectionName.includes(key)) {
                return emoji;
            }
        }
        return "üìÑ";
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ HTML –∏–∑ Google Docs
    async parseGoogleDocsHTML(htmlContent) {
        const dom = new JSDOM(htmlContent);
        const document = dom.window.document;

        const sections = [];
        let currentSection = null;
        let currentContent = [];

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        const elements = document.querySelectorAll('h1, h2, h3, h4, h5, h6, p, ul, ol, li');

        for (const element of elements) {
            const tagName = element.tagName.toLowerCase();

            if (tagName.startsWith('h')) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ–∫—Ü–∏—é
                if (currentSection && currentContent.length > 0) {
                    sections.push({
                        title: currentSection,
                        content: currentContent.join('\n').trim()
                    });
                }

                // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
                currentSection = element.textContent.trim();
                currentContent = [];
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫ —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
                if (currentSection) {
                    const text = element.textContent.trim();
                    if (text) {
                        currentContent.push(text);
                    }
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
        if (currentSection && currentContent.length > 0) {
            sections.push({
                title: currentSection,
                content: currentContent.join('\n').trim()
            });
        }

        return sections;
    }

    // –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ Markdown —Ñ–∞–π–ª–∞
    async readMarkdownFile(filename) {
        try {
            const filePath = path.join(this.partsDir, filename);
            const content = await fs.readFile(filePath, 'utf8');
            return content;
        } catch (error) {
            console.log(`–§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π`);
            return null;
        }
    }

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    compareContent(oldContent, newContent) {
        if (!oldContent) return { changed: true, diff: newContent };

        // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        const oldText = oldContent.replace(/[^\w\s]/g, '').toLowerCase();
        const newText = newContent.replace(/[^\w\s]/g, '').toLowerCase();

        return {
            changed: oldText !== newText,
            diff: newContent
        };
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    formatMarkdown(sectionName, content) {
        const emoji = this.getEmoji(sectionName);
        const title = sectionName.replace(/^#+\s*/, ''); // –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏

        return `# ${title}

${content}

---
`;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    async updateFile(filename, newContent) {
        const filePath = path.join(this.partsDir, filename);
        await fs.writeFile(filePath, newContent, 'utf8');
        this.changes.push(`–û–±–Ω–æ–≤–ª–µ–Ω: ${filename}`);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    async createFile(filename, content) {
        const filePath = path.join(this.partsDir, filename);
        await fs.writeFile(filePath, content, 'utf8');
        this.changes.push(`–°–æ–∑–¥–∞–Ω: ${filename}`);
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    async syncRules(googleDocsHTML) {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∞–≤–∏–ª...');

        // –ü–∞—Ä—Å–∏–º Google Docs
        const sections = await this.parseGoogleDocsHTML(googleDocsHTML);

        for (const section of sections) {
            const filename = SECTION_MAPPING[section.title];

            if (filename) {
                // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
                const existingContent = await this.readMarkdownFile(filename);

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                const formattedContent = this.formatMarkdown(section.title, section.content);

                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
                const comparison = this.compareContent(existingContent, formattedContent);

                if (comparison.changed) {
                    if (existingContent) {
                        await this.updateFile(filename, formattedContent);
                    } else {
                        await this.createFile(filename, formattedContent);
                    }
                } else {
                    console.log(`‚úì ${filename} - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
                }
            } else {
                console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª: ${section.title}`);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º README
        await this.updateREADME(sections);

        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:', this.changes);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README.md
    async updateREADME(sections) {
        const readmePath = path.join(__dirname, '../files/README.md');

        let readmeContent = `# –ê—Ä—Ö–∏–ø–µ–ª–∞–≥ - –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã

> –ù–∞—Å—Ç–æ–ª—å–Ω–∞—è —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ —Å–µ—Ç—Ç–∏–Ω–≥–µ –∑–∞–≥–∞–¥–æ—á–Ω–æ–≥–æ –∞—Ä—Ö–∏–ø–µ–ª–∞–≥–∞, –æ–∫—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç—É–º–∞–Ω–æ–º

## üìö –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ

### üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
`;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–∑–¥–µ–ª—ã
        for (const section of sections) {
            const filename = SECTION_MAPPING[section.title];
            if (filename) {
                const emoji = this.getEmoji(section.title);
                const linkName = filename.replace('.md', '');
                readmeContent += `- [${section.title}](${linkName}) - ${emoji}\n`;
            }
        }

        readmeContent += `

## üé≤ –°–∏—Å—Ç–µ–º–∞ –∏–≥—Ä—ã
**–ê—Ä—Ö–∏–ø–µ–ª–∞–≥** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É **2d20** - –¥–≤–∞ –¥–≤–∞–¥—Ü–∞—Ç–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫. –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ - –≤—ã–¥–∞—é—â–∏–µ—Å—è –ª–∏—á–Ω–æ—Å—Ç–∏ –≤ –º–∏—Ä–µ, –ø–æ–ª–Ω–æ–º —Ç–∞–π–Ω –∏ –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π.

## üåä –°–µ—Ç—Ç–∏–Ω–≥
–ú–∏—Ä –ê—Ä—Ö–∏–ø–µ–ª–∞–≥–∞ - —ç—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Å—Ç—Ä–æ–≤–æ–≤, –æ–∫—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–µ—Å–∫—Ä–∞–π–Ω–∏–º –æ–∫–µ–∞–Ω–æ–º –∏ –≥—É—Å—Ç—ã–º —Ç—É–º–∞–Ω–æ–º. –ó–¥–µ—Å—å –Ω–µ—Ç –∑–≤–µ–∑–¥ –≤ –Ω–æ—á–Ω–æ–º –Ω–µ–±–µ, –∞ —Å–æ–ª–Ω—Ü–µ –≤—Å—Ç–∞–µ—Ç –∏–∑ —á–µ—Ä–Ω—ã—Ö –≤–æ–¥. –ö–∞–∂–¥–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º.
`;

        await fs.writeFile(readmePath, readmeContent, 'utf8');
        this.changes.push('–û–±–Ω–æ–≤–ª–µ–Ω: README.md');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = RulesSync;

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const sync = new RulesSync();

    // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    console.log('üìñ –°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª –ê—Ä—Ö–∏–ø–µ–ª–∞–≥–∞');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node sync-rules.js <google-docs-html>');

    if (process.argv.length < 3) {
        console.log('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å HTML-–∫–æ–Ω—Ç–µ–Ω—Ç Google Docs');
        process.exit(1);
    }

    const htmlContent = process.argv[2];
    sync.syncRules(htmlContent).catch(console.error);
}